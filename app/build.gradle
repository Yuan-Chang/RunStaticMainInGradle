apply plugin: 'com.android.application'

android {
    compileSdkVersion 25
    buildToolsVersion "25.0.2"
    defaultConfig {
        applicationId "yuan.com.runstaticmainingradle"
        minSdkVersion 16
        targetSdkVersion 25
        versionCode 1
        versionName "1.0"
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile 'com.android.support:appcompat-v7:25.3.0'
    compile 'com.android.support.constraint:constraint-layout:1.0.0-alpha5'
    //    compile 'com.intuit.scs:ImageCaptureSDK:3.8.2-SNAPSHOT'
    testCompile 'junit:junit:4.12'
    compile 'com.yc.test:RunStaticMainInGradle:0.0.1-20170603.021933-7'
    //compile project(path: ':mytestsdk')

    //compile files('libs/gson-2.8.0.jar')
}

task myTask(type: JavaExec) {

    def ConfigFileName = "MyConfig"
    def ConfigFilePackageName = "yuan.com.runstaticmainingradle"

    def executeFileName = "MyMain"
    def executeFilePackageName = "yuan.com.mytestsdk"
    def executeFilePackagePath = executeFilePackageName.replaceAll("\\.","/")

    def libraryName = "RunStaticMainInGradle"

    def executeFileClassPath;
    fileTree(dir: '..', include: "**/${executeFilePackagePath}/${executeFileName}.class").each {
        File file -> executeFileClassPath = [file.absolutePath.substring(0,file.absolutePath.indexOf("/${executeFilePackagePath}"))]
    }
    if (executeFileClassPath == null)
    {
        fileTree(dir: '..', include: ".idea/libraries/${libraryName}*").each { File file ->
            def roots = new XmlSlurper().parseText(file.getText()).library.CLASSES.root
            for(int i=0; i<roots.size(); i++)
            {
                def url = roots[i].@url.text()
                if (url.endsWith("classes.jar!/"))
                {
                    url = url.replaceFirst("jar://\\\$PROJECT_DIR\\\$",{project.rootDir})
                    url = url.replaceFirst("jar://\\\$USER_HOME\\\$",{System.getProperty("user.home")})
                    url = url.substring(0,url.length()-2)
                    executeFileClassPath = [url]
                    break
                }
            }
        }
    }

    def configFilePackagePath = ConfigFilePackageName.replaceAll("\\.","/")
    def configFileClassPath;
    fileTree(dir: '.', include: "**/${configFilePackagePath}/${ConfigFileName}.class").each {
        File file -> configFileClassPath = file.absolutePath.substring(0,file.absolutePath.indexOf("/${configFilePackagePath}"))
    }

    def gsonPath;
    fileTree(dir: '..', include: "**/${executeFilePackagePath}/${executeFileName}.class").each {
        File file -> executeFileClassPath = [file.absolutePath.substring(0,file.absolutePath.indexOf("/${executeFilePackagePath}"))]
    }
    fileTree(dir: '..', include: ".idea/libraries/gson*.xml").each { File file ->
        def roots = new XmlSlurper().parseText(file.getText()).library.CLASSES.root
        for(int i=0; i<roots.size(); i++)
        {
            def url = roots[i].@url.text()
            if (url.endsWith("gson-2.2.4.jar!/"))
            {
                url = url.replaceFirst("jar://\\\$PROJECT_DIR\\\$",{project.rootDir})
                url = url.replaceFirst("jar://\\\$USER_HOME\\\$",{System.getProperty("user.home")})
                url = url.substring(0,url.length()-2)
                gsonPath = url
                break
            }
        }
    }

    if (executeFileClassPath != null) classpath executeFileClassPath
    main = "${executeFilePackageName}.${executeFileName}"

    if (configFileClassPath != null)
        args = [configFileClassPath,ConfigFilePackageName,ConfigFileName,gsonPath]

}


